// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
		DMux8Way(in=load, sel=address[3..5], a=ra, b=rb, c=rc, d=rd, e=re, f=rf, g=rg, h=rh);
		RAM8(in=in, load=ra, address=address[0..2], out=ora);
		RAM8(in=in, load=rb, address=address[0..2], out=orb);
		RAM8(in=in, load=rc, address=address[0..2], out=orc);
		RAM8(in=in, load=rd, address=address[0..2], out=ord);
		RAM8(in=in, load=re, address=address[0..2], out=ore);
		RAM8(in=in, load=rf, address=address[0..2], out=orf);
		RAM8(in=in, load=rg, address=address[0..2], out=org);
		RAM8(in=in, load=rh, address=address[0..2], out=orh);
		Mux8Way16(a=ora, b=orb, c=orc, d=ord, e=ore, f=orf, g=org, h=orh, sel=address[3..5], out=out);
}
